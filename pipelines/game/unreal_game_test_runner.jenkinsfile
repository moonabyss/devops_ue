def ColorFromBuildResult (result) {
    if ("${result}" == 'SUCCESS') return '#18a558';
    if ("${result}" == 'ABORTED') return '#6e6e6e';
    if ("${result}" == 'UNSTABLE') return '#fcba03';
    return '#ff0000';
}

pipeline {
    agent {
        node {
            label ""
            customWorkspace "$BUILD_DIR"
        }
    }

    environment {
        /*
        GIT_URL_GAME = 'https://github.com/moonabyss/UnrealTPSGame'
        GIT_CREDENTIALS_GAME = 'moonabyss-github'
        GIT_BRANCH_GAME = 'master'
        UAT_PATH = 'f:\\Builds\\UE_5.0_InstalledBuild\\Engine\\Build\\BatchFiles\\RunUAT.bat'
        PROJECT_PATH = "$BUILD_DIR\\TPS.uproject"
        PLATFORM = 'Win64'
        BUILD_FLAGS = '-build -cook -ubtargs="-UnoptimizedCode'
        SLACK_CHANNEL = 'tps-game-builds'
        CONFIG = 'Development' //['Development', 'Shipping', 'DebugGame']
        PLATFORM = 'Win64'
        EDITOR_PATH = 'f:\\Builds\\UE_5.0_InstalledBuild\\Engine\\Binaries\\Win64\\UnrealEditor.exe'
        TEST_NAMES = 'TPSGame'
        TEST_OUTPUT_PATH = "$BUILD_DIR\\Build\\Tests"
        EDITOR_FLAGS = '-stdout -nosplash -nullRHI'
        CODE_COVERAGE_EXPORT_TYPE = "cobertura:$BUILD_DIR\\Build\\Tests\\Coverage.xml"
        OPEN_CPP_COVERAGE_PATH = 'c:\\Program Files\\OpenCppCoverage\\OpenCppCoverage.exe'
        SOURCE_CODE_PATH = "$BUILD_DIR\\Source"
        EXCLUDED_SOURCES = "$BUILD_DIR\\Source\\TPS\\Tests"
        PROJECT_PURE_NAME = 'TPS'
        UNOPTIMIZED_BUILD = false
        TEST_EXTRA_CMD = 'SetPriority Critical;'
        */
        UNOPTIMIZE_FALSE_LINE = 'public bool UnoptimizedCode = false;'
        UNOPTIMIZE_TRUE_LINE = 'public bool UnoptimizedCode = true;'
        EDITOR_TARGET_PATH = "$SOURCE_CODE_PATH\\${PROJECT_PURE_NAME}Editor.Target.cs"
    }

    stages {
        stage('Git clone') {
            steps {
                slackSend channel: "$SLACK_CHANNEL",
                    color: "$currentBuild.previousBuild" == 'null' ? '#18a558' : ColorFromBuildResult("$currentBuild.previousBuild.result"),
                    message: "Build STARTED: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

                checkout scmGit(branches: [[name: "$GIT_BRANCH_GAME"]], 
                extensions: [cleanBeforeCheckout()], 
                userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIALS_GAME", 
                url: "$GIT_URL_GAME"]])
            }
        }
        stage('Set unoptimized build') {
            when {
                environment name: 'UNOPTIMIZED_BUILD', value: 'true'
            }
            steps {
                bat '''
                    powershell -Command "(gc %EDITOR_TARGET_PATH%) -replace '%UNOPTIMIZE_FALSE_LINE%', '%UNOPTIMIZE_TRUE_LINE%' | Out-File %EDITOR_TARGET_PATH%"
                '''
            }
        }
        stage('Build') {
            steps {
                bat '''
                    "%UAT_PATH%" BuildCookRun ^
                    -project="%PROJECT_PATH%" ^
                    -platform="%PLATFORM%" ^
                    -clientconfig="%CONFIGURATION%" ^
                    %BUILD_FLAGS%
                '''
            }
        }
        stage('Unset unoptimized build') {
            when {
                environment name: 'UNOPTIMIZED_BUILD', value: 'true'
            }
            steps {
                bat '''
                    powershell -Command "(gc %EDITOR_TARGET_PATH%) -replace '%UNOPTIMIZE_TRUE_LINE%', '%UNOPTIMIZE_FALSE_LINE%' | Out-File %EDITOR_TARGET_PATH%"
                '''
            }
        }
        stage('Test') {
            steps {
                bat '''
                    set TEST_RUNNER="%EDITOR_PATH%" "%PROJECT_PATH%" -ExecCmds="Automation %TEST_EXTRA_CMD%RunTests %TEST_NAMES%;Quit" ^
                    -ReportOutputPath="%TEST_OUTPUT_PATH%" %EDITOR_FLAGS%

                    "%OPEN_CPP_COVERAGE_PATH%" --modules="%BUILD_DIR%" --sources="%SOURCE_CODE_PATH%" ^
                    --excluded_sources="%EXCLUDED_SOURCES%" --export_type="%CODE_COVERAGE_EXPORT_TYPE%" -- %TEST_RUNNER%

                    if errorlevel 255 echo WARNING: Some tests failed, error code: %errorlevel% & exit /b 0
                '''
            }
        }
        stage('Publish test results') {
            environment {
                CONVERTER_PATH = "$BUILD_DIR\\devops\\tests\\ue_report_to_junit.py"
                UE_TESTS_PATH = "$BUILD_DIR\\Build\\Tests\\index.json"
                JUNIT_TESTS_PATH = "$BUILD_DIR\\Build\\Tests\\index.xml"
                CODE_COVERAGE_PATH = "$BUILD_DIR\\Build\\Tests\\Coverage.xml"
            }
            steps {
                bat '''
                    "%CONVERTER_PATH%" -ue_report_path="%UE_TESTS_PATH%" -junit_xml_path="%JUNIT_TESTS_PATH%"
                '''
                junit 'Build\\Tests\\index.xml'
                cobertura coberturaReportFile: 'Build\\Tests\\Coverage.xml', onlyStable: false
            }
        }
    }

    post {
        always {
            slackSend channel: "$SLACK_CHANNEL",
                color: ColorFromBuildResult("$currentBuild.currentResult"),
                message: "Build $currentBuild.currentResult: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }
}